# Idea Playground Project

## Project Goal
This is an **idea playground** - a UI that allows the user to explore, develop, and organize their ideas in a structured way. The core concept is to provide a ticket-based interface where ideas can be viewed, edited, filtered, and organized.

## Development Philosophy
- **Work Incrementally**: Work in small chunks, committing each time there is a working tested state
- **Test-driven**: Start with failing e2e tests before implementing features
- **Component thinking**: Always consider loaders, warnings, error states
- **Data abstraction**: Keep data layer separate with Express.js backend
- **User experience**: Focus on smooth interactions and intuitive UI
- **RESTful APIs**: Use Express.js for scalable backend operations on Google Cloud Run

## Key Features
- **Multiple view modes**: Kanban board (organized by readiness) and detailed list view with reordering
- **Rich editing**: Modal editor with markdown support and metadata editing, plus full-screen mode
- **Dimensions system**: Structured tagging system with field, readiness, complexity, and connections
- **Filtering**: AND-based filtering by dimensions with clean tag-style interface
- **Drag & drop**: Visual arrangement and reordering of ideas
- **Data abstraction**: Cloud Firestore with Express.js RESTful API layer

## Tech Stack
- **Frontend**: React + TypeScript + Tailwind CSS
- **Backend**: Express.js on Google Cloud Run
- **Database**: Cloud Firestore (NoSQL)
- **Hosting**: Firebase Hosting (Frontend), Google Cloud Run (Backend)
- **Markdown editing**: @uiw/react-md-editor
- **Drag & drop**: @dnd-kit
- **Testing**: Playwright for e2e tests
- **Development**: Firestore emulator for local testing

## File Structure
- `/src/components/` - React components
- `/src/services/` - Data access layer (abstracts REST API calls)
- `/src/types/` - TypeScript interfaces
- `/backend/` - Express.js backend (deployed to Cloud Run)
- `/scripts/` - Automation scripts (setup, backup, deployment)
- `/data/` - Data backups and migration files
- `/tests/` - Playwright e2e tests
- `/firebase.json` - Firebase configuration
- `/firestore.rules` - Firestore security rules

## Development Workflow
- **Local development**: Use `npm run dev` to start frontend + backend + Firestore emulator
- **One-time setup**: Use `npm run setup` for automated environment setup
- **Data migration**: Automated via setup script
- **Deployment**: Use `npm run deploy` for complete Cloud Run + Firebase Hosting deployment
- **Testing**: Local backend with Firestore emulator for isolated testing

## Architecture
```
React (Frontend) → Express.js (Backend) → Cloud Firestore (Database)
     ↓                    ↓                      ↓
Firebase Hosting    Google Cloud Run      Google Cloud
```
